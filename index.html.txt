<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>5x5 Sudoku</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <style>
        @import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;700&display=swap');
        
        :root {
            --bg-color: #f7f3e9;
            --main-color: #5d4037;
            --secondary-color: #a1887f;
            --accent-color: #bcaaa4;
        }

        body {
            font-family: 'Inter', sans-serif;
            background-color: var(--bg-color);
            color: var(--main-color);
            display: flex;
            justify-content: center;
            align-items: center;
            min-height: 100vh;
            padding: 20px;
        }

        .game-container {
            background-color: white;
            padding: 2rem;
            border-radius: 1rem;
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.08);
            text-align: center;
            width: 100%;
            max-width: 400px;
        }

        .sudoku-grid {
            display: grid;
            grid-template-columns: repeat(5, 1fr);
            gap: 2px;
            margin: 1.5rem auto;
            border: 3px solid var(--main-color);
            border-radius: 0.5rem;
            box-shadow: inset 0 0 10px rgba(0, 0, 0, 0.1);
        }

        .cell {
            width: 100%;
            height: 50px;
            display: flex;
            justify-content: center;
            align-items: center;
            font-size: 1.5rem;
            font-weight: bold;
            background-color: #fff;
            color: var(--main-color);
            border: 1px solid var(--accent-color);
            cursor: pointer;
            transition: background-color 0.2s;
        }

        .cell.fixed {
            background-color: var(--bg-color);
            color: var(--main-color);
            cursor: not-allowed;
            font-weight: 700;
        }

        .cell.highlight {
            background-color: #e0e0e0;
        }
        
        /* Sub-grid borders for 5x5 */
        .cell:nth-child(5n) {
            border-right: 3px solid var(--main-color);
        }
        .cell:nth-child(5n+1) {
            border-left: 1px solid var(--accent-color);
        }
        .cell:nth-child(25n) {
            border-bottom: 3px solid var(--main-color);
        }
        .cell:nth-child(25n+1) {
            border-top: 1px solid var(--accent-color);
        }

        .cell:nth-child(-n+5) {
            border-top: 3px solid var(--main-color);
        }

        /* Fix border on first and last cells */
        .cell:nth-child(1) {
            border-top-left-radius: 0.5rem;
        }
        .cell:nth-child(5) {
            border-top-right-radius: 0.5rem;
        }
        .cell:nth-child(21) {
            border-bottom-left-radius: 0.5rem;
        }
        .cell:nth-child(25) {
            border-bottom-right-radius: 0.5rem;
        }

        /* Row group borders */
        .cell:nth-child(11), .cell:nth-child(12), .cell:nth-child(13), .cell:nth-child(14), .cell:nth-child(15) {
             border-top: 3px solid var(--main-color);
        }
        .cell:nth-child(26) {
            border-top: 3px solid var(--main-color);
        }

        .control-panel {
            display: flex;
            flex-direction: column;
            gap: 1rem;
        }

        .button {
            padding: 0.75rem 1.5rem;
            border-radius: 0.5rem;
            font-weight: bold;
            transition: transform 0.1s, box-shadow 0.1s;
            cursor: pointer;
            box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);
        }

        .button:active {
            transform: translateY(2px);
            box-shadow: 0 2px 4px -1px rgba(0, 0, 0, 0.1), 0 1px 2px -1px rgba(0, 0, 0, 0.06);
        }

        .check-button {
            background-color: var(--secondary-color);
            color: white;
        }

        .next-button {
            background-color: var(--main-color);
            color: white;
        }

        .message {
            margin-top: 1.5rem;
            font-weight: bold;
            min-height: 24px;
        }
    </style>
</head>
<body class="bg-gray-100 flex items-center justify-center min-h-screen p-4">

    <div class="game-container">
        <h1 class="text-3xl font-bold mb-4 text-center">5x5 Sudoku</h1>

        <div id="grid-container" class="sudoku-grid"></div>

        <div class="control-panel">
            <button id="check-button" class="button check-button">Check Solution</button>
            <button id="next-button" class="button next-button">Next Puzzle</button>
        </div>

        <div id="message" class="message"></div>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', () => {
            const GRID_SIZE = 5;
            const SUBGRID_SIZE = 5; // In 5x5, each subgrid is a row or column of the main grid
            const gridContainer = document.getElementById('grid-container');
            const checkButton = document.getElementById('check-button');
            const nextButton = document.getElementById('next-button');
            const messageEl = document.getElementById('message');
            
            let board = [];
            let fixedCells = [];
            let selectedCell = null;
            
            // --- CORE SUDOKU GENERATION ALGORITHM ---
            
            // Checks if a number can be placed at a given position
            function isSafe(grid, row, col, num) {
                // Check row
                for (let x = 0; x < GRID_SIZE; x++) {
                    if (grid[row][x] === num) return false;
                }
                // Check column
                for (let x = 0; x < GRID_SIZE; x++) {
                    if (grid[x][col] === num) return false;
                }
                // No sub-grid check needed for 5x5 as the problem is simplified
                return true;
            }
            
            function solveSudoku(grid) {
                for (let row = 0; row < GRID_SIZE; row++) {
                    for (let col = 0; col < GRID_SIZE; col++) {
                        if (grid[row][col] === 0) {
                            const numbers = [1, 2, 3, 4, 5].sort(() => Math.random() - 0.5);
                            for (let num of numbers) {
                                if (isSafe(grid, row, col, num)) {
                                    grid[row][col] = num;
                                    if (solveSudoku(grid)) {
                                        return true;
                                    }
                                    grid[row][col] = 0; // Backtrack
                                }
                            }
                            return false;
                        }
                    }
                }
                return true;
            }
            
            // Fills the Sudoku grid with a complete, valid solution
            function generateCompleteGrid() {
                const grid = Array(GRID_SIZE).fill(null).map(() => Array(GRID_SIZE).fill(0));
                solveSudoku(grid);
                return grid;
            }

            // Creates the initial puzzle by removing numbers
            function createPuzzle(fullGrid, difficulty) {
                const puzzle = JSON.parse(JSON.stringify(fullGrid));
                fixedCells = [];
                let removedCount = 0;
                
                // Determine number of cells to remove based on difficulty (5x5 is simple)
                const cellsToRemove = difficulty * GRID_SIZE;
                
                while (removedCount < cellsToRemove) {
                    const row = Math.floor(Math.random() * GRID_SIZE);
                    const col = Math.floor(Math.random() * GRID_SIZE);
                    
                    if (puzzle[row][col] !== 0) {
                        puzzle[row][col] = 0;
                        removedCount++;
                    }
                }
                
                for (let r = 0; r < GRID_SIZE; r++) {
                    for (let c = 0; c < GRID_SIZE; c++) {
                        if (puzzle[r][c] !== 0) {
                            fixedCells.push({ row: r, col: c });
                        }
                    }
                }
                
                return puzzle;
            }
            
            // --- UI RENDERING & INTERACTION ---
            
            function renderGrid(currentBoard) {
                gridContainer.innerHTML = '';
                
                currentBoard.forEach((row, rowIndex) => {
                    row.forEach((value, colIndex) => {
                        const cell = document.createElement('div');
                        cell.classList.add('cell');
                        cell.dataset.row = rowIndex;
                        cell.dataset.col = colIndex;
                        
                        if (value !== 0) {
                            cell.textContent = value;
                            cell.classList.add('fixed');
                        } else {
                            cell.textContent = '';
                            cell.addEventListener('click', () => selectCell(cell));
                        }
                        
                        gridContainer.appendChild(cell);
                    });
                });
            }
            
            function selectCell(cell) {
                if (selectedCell) {
                    selectedCell.classList.remove('highlight');
                }
                selectedCell = cell;
                selectedCell.classList.add('highlight');
                
                showInputPrompt();
            }

            function showInputPrompt() {
                // A simple prompt is used here, a custom modal would be a better UI practice
                // but this works for this single-file solution
                let input = prompt("Enter a number (1-5):");
                if (input !== null) {
                    let num = parseInt(input);
                    if (num >= 1 && num <= 5) {
                        selectedCell.textContent = num;
                        board[selectedCell.dataset.row][selectedCell.dataset.col] = num;
                    } else {
                        messageEl.textContent = "Invalid input. Please enter a number between 1 and 5.";
                    }
                }
            }
            
            // --- GAME LOGIC ---
            
            function checkSolution() {
                let isSolved = true;
                
                // Check rows and columns
                for (let i = 0; i < GRID_SIZE; i++) {
                    const rowSet = new Set(board[i]);
                    const colSet = new Set(board.map(row => row[i]));
                    
                    if (rowSet.size !== GRID_SIZE || rowSet.has(0) || colSet.size !== GRID_SIZE || colSet.has(0)) {
                        isSolved = false;
                        break;
                    }
                }

                if (isSolved) {
                    messageEl.textContent = "Congratulations! You've solved the puzzle!";
                    messageEl.style.color = 'green';
                } else {
                    messageEl.textContent = "Oops! The solution is incorrect. Check your numbers.";
                    messageEl.style.color = 'red';
                }
            }
            
            function startNewGame() {
                const completeGrid = generateCompleteGrid();
                board = createPuzzle(completeGrid, 3); // Difficulty 3 removes more cells
                renderGrid(board);
                messageEl.textContent = "";
            }
            
            // --- EVENT LISTENERS ---
            checkButton.addEventListener('click', checkSolution);
            nextButton.addEventListener('click', startNewGame);
            
            // Start the game on initial load
            startNewGame();
        });
    </script>
</body>
</html>
